import dateutil.parser
from datetime import datetime
from app.reports.ReportBase import Report
import plotly.express as px
import plotly.graph_objs as go


class WeekdayReport(Report):

    def save(self):
        super().save()

    def getName(self) -> str:
        return "[ALL] chart_heat - playtime per weekday"

    def __init__(self, membershipType, membershipId) -> None:
        super().__init__(membershipType, membershipId)

    def generate(self, data) -> Report:
        timeArray = self.generateData(data)

        fig = go.Figure()
        fig.add_trace(
            go.Heatmap(
                z=timeArray,
                x=list(range(0, 24)),
                y=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', "Saturday", "Sunday"],
                colorscale=px.colors.sequential.deep,
                reversescale=True,
                texttemplate="%{z}",
                xgap=5,
                ygap=5)
        )

        fig.update_layout(template="plotly_dark",
                          title="The amount of days you played on specific weekdays on specific times (UTC)"
                                "<br><sup>Generated by <a href='https://twitter.com/MijagoCoding/'>Mijago</a></sup>")
        fig.update_xaxes(side="top")
        fig['layout']['yaxis']['autorange'] = "reversed"
        fig.update_layout(hovermode="x unified")
        fig.update_xaxes(showticklabels=True)
        self.fig = fig
        return self

    def generateData(self, data):
        timeArray = [[0 for k in range(0, 24)] for n in range(0, 7)]
        lookup = set()

        def generateKey(xdate):
            return "%d-%d-%d-%d" % (
                xdate.year,
                xdate.month,
                xdate.day,
                xdate.hour
            )

        for datapoint in data:
            if "entries" not in datapoint: continue
            timestamp = dateutil.parser.parse(datapoint["period"]).timestamp()
            for entry in datapoint["entries"]:
                if entry["player"]["destinyUserInfo"]["membershipId"] != str(self.membershipId): continue

                starts = entry["values"]["startSeconds"]["basic"]["value"]
                ends = starts + entry["values"]["timePlayedSeconds"]["basic"]["value"]

                start_date = datetime.fromtimestamp(timestamp + starts)

                if generateKey(start_date) not in lookup:
                    weekday = start_date.weekday()
                    hour = start_date.hour
                    timeArray[weekday][hour] += 1
                    lookup.add(generateKey(start_date))

                playtimeMin = entry["values"]["timePlayedSeconds"]["basic"]["value"] / 60 - 60
                while playtimeMin > 60:
                    playtimeMin -= 60
                    start_date = datetime.fromtimestamp(timestamp + starts + 60 * 60)
                    if generateKey(start_date) not in lookup:
                        weekday = start_date.weekday()
                        hour = start_date.hour
                        timeArray[weekday][hour] += 1
                        lookup.add(generateKey(start_date))
        return timeArray
