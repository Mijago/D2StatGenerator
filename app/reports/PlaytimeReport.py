import dateutil.parser
import pandas as pd
from datetime import datetime

from app.data.activities import ACTIVITY_NAMES
import plotly.express as px

from app.reports.ReportBase import Report


class PlaytimeReport(Report):

    def save(self):
        super().save()

    def getName(self) -> str:
        return "chart_playtime"

    def __init__(self, membershipType, membershipId) -> None:
        super().__init__(membershipType, membershipId)

    def generate(self, data) -> Report:
        df = self.generateDataframe(data)
        fig = px.bar(df, x='Date', y="playtime",
                     title="Activity playtime in hours, per week and day, split in activity types"
                           "<br><sup>Note that this graph ignores orbit and flying time.</sup>"
                           "<br><sup>Generated by <a href='https://twitter.com/MijagoCoding/'>Mijago</a></sup>",
                     color_discrete_sequence=px.colors.qualitative.Light24,
                     template="plotly_dark",
                     color="mode", facet_row="timespan"
                     )
        fig.update_traces(hovertemplate="%{y:.2f}h")
        fig.update_layout(hovermode="x unified")
        fig.update_yaxes(matches=None)
        fig.update_yaxes(showticklabels=True)
        fig.update_xaxes(matches='x')
        self.fig = fig
        return self

    def generateRawDataframe(self, data):
        starttime = []
        endtime = []
        playtime = []
        mode = []

        for datapoint in data:
            if "entries" not in datapoint: continue
            timestamp = dateutil.parser.parse(datapoint["period"]).timestamp()
            for entry in datapoint["entries"]:
                if entry["player"]["destinyUserInfo"]["membershipId"] != str(self.membershipId): continue
                starts = entry["values"]["startSeconds"]["basic"]["value"]
                ends = starts + entry["values"]["timePlayedSeconds"]["basic"]["value"]

                starttime.append(datetime.fromtimestamp(timestamp + starts).strftime("%Y-%m-%d %H:%M"))
                endtime.append(datetime.fromtimestamp(timestamp + ends).strftime("%Y-%m-%d %H:%M"))
                playtime.append(entry["values"]["timePlayedSeconds"]["basic"]["value"] / 60)
                mode.append(ACTIVITY_NAMES[datapoint["activityDetails"]["mode"]])

        df = pd.DataFrame({
            "start": starttime,
            "end": endtime,
            "playtime": playtime,
            "mode": mode,
        })
        return df

    def generateDataframe(self, data):
        df = self.generateRawDataframe(data)
        dataframes = []

        df['Date'] = pd.to_datetime(df['start'])  # - pd.to_timedelta(7, unit='d')
        df_day_max = df
        df_day_max = df_day_max.sort_values('Date').groupby(["mode", pd.Grouper(key='Date', freq='d')])["playtime"].sum().reset_index().sort_values(['Date', "mode"]).dropna()
        df_day_max["playtime"] = df_day_max["playtime"] / 60
        df_day_max["timespan"] = "day"
        dataframes.append(df_day_max)

        df['Date'] = pd.to_datetime(df['start']) - pd.to_timedelta(7, unit='d')
        df_week_max = df_day_max
        df_week_max = df_week_max.sort_values('Date').groupby(["mode", pd.Grouper(key='Date', freq='W-tue')])["playtime"].sum().reset_index().sort_values(['Date', "mode"]).dropna()
        df_week_max["timespan"] = "week"
        dataframes.insert(0, df_week_max)

        df_combined = pd.concat(dataframes)

        return df_combined
